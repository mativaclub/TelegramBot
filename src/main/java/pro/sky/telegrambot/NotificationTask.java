package pro.sky.telegrambot;

import jakarta.persistence.*;

import java.time.LocalDateTime;
import java.util.Objects;

@Entity
//that this class will be connected to TB

@Table(name = "notification_task")
//choosing with exactly table will be connected if name of class and table are different
public class NotificationTask {

    //this field will be unique and later will be easy to find it
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    //how will be generated ID, starting from id 1 for each table
    @Id
    private Long id;
    private Long idChat;
    private String notifyText;

    private LocalDateTime dateTime;

    //create constructor without parameters, for creating object without params by Spring, when
    //he will create constructor and do not put data inside
    public NotificationTask() {
    }
    //because Spring calls method newInstance without params, in other case would be error
    //that is needed for Spring

    //don't include id, because we don't know it in advance, and it is autogenerated
    public NotificationTask(Long idChat, String notifyText, LocalDateTime dateTime) {
        this.idChat = idChat;
        this.notifyText = notifyText;
        this.dateTime = dateTime;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getIdChat() {
        return idChat;
    }

    public void setIdChat(Long idChat) {
        this.idChat = idChat;
    }

    public String getNotifyText() {
        return notifyText;
    }

    public void setNotifyText(String notifyText) {
        this.notifyText = notifyText;
    }

    public LocalDateTime getDateTime() {
        return dateTime;
    }

    public void setDateTime(LocalDateTime dateTime) {
        this.dateTime = dateTime;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        NotificationTask that = (NotificationTask) o;
        return Objects.equals(id, that.id) && Objects.equals(idChat, that.idChat) && Objects.equals(notifyText, that.notifyText) && Objects.equals(dateTime, that.dateTime);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, idChat, notifyText, dateTime);
    }


    @Override
    public String toString() {
        return "NotificationTask{" +
                "id=" + id +
                ", idChat=" + idChat +
                ", notifyText='" + notifyText + '\'' +
                ", dateTime=" + dateTime +
                '}';
    }


}
